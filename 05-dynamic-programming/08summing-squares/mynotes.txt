# 06/17/2023
# Perfect Squares

1, 4, 9, 16, 25, 36

We will take a number as input and figure out the 
Minimum perfect squares that sum up to our target number.

Input: 12

4 + 4 + 4
This is valid because 4 is a perfect square

9 + 1 + 1 + 1 
However this would not be minimum, but it is valid.

The program would return 3 because 4 + 4 + 4 = 12


E.G. Input 10
We will subtract perfect squares from each nodes


#	 	 10
#	     1/    |4 \9
#	     9     6   1
#	  1/|4\9  1/\4 |1
#	  8 5  0  5  2 0
#

We have found out that this path leads to zero
We can see that it gives us 10.

#   10
#    \9
#     1 
#     |1		
#     0  

9 + 1 = 10, min path is 2

Further expanded: we will just avoid drawing the left side.
Since this tree grows quickly!

#	 	   10
#	     1/      |4  \9
#	     9       6    1
#	  1/|4\9  1/  \4  |1
#	  8 5  0  5    2  0
#	         1/\4  |1
#	         4  1  1
#	       1/|4 |1 |1
#	       3 0  0  0
#	       |1
#	       2
#	       |1	
#	       1
#	       |0
# 	       0	    

We prefer a shorter path. So if we count the number of edges 
Within a path that tells us the number of perfect squares we 
Can use to accumulate that original sum. We should return the 2
Because 9 + 1


Base case:
If n==0
Return 0

To create 0 we need to sum up 0 perfect squares
When we bubble up do not forget to add 1 to showcase traveling
Distance.

Zero bubbles up

#	 	   10
#	     1/      |4  \9
#	     9       6    1
#	  1/|4\9  1/  \4  |1
#	  8 5  0  5    2  0
#	         1/\4  |1
#	      (1)4  1  1
#	       1/|4 |1 |1
#	       3 0  0  0
#	       |1
#	       2
#	       |1	
#	       1
#	       |0
#(0) 	       0	    


Since we are using minimization logic, always choose the smaller
Between two values and always add + 1 to count edge travel distance.

For example at node 4, there must be only one prefect square
That we need to get a quantity of 4. 4 itself is a perfect square

Eventually we bubble up to 3 in the middle sub tree

#	 	   10
#	     1/      |4  \9
#	     9    (3)6    1
#	  1/|4\9  1/  \4  |1
#	  8 5  0  5    2  0
#	         1/\4  |1
#	      (1)4  1  1
#	       1/|4 |1 |1
#	       3 0  0  0
#	       |1
#	       2
#	       |1	
#	       1
#	       |0
#(0) 	       0	    

The three shows us the different paths we can take to get 4
In the middle sub tree

#
#		 6
#	       1/ \4
#	       5   2	
#	     1/\4  |1		
#	     4	1  1 	
#	     |4	|1 |1	
#	     0  0  0
#


Brute force time complexity
Time O(sqrt(n)^n)
Space: O(n)

We can fix it with dynamic programming.

Dynamic Programming W/memoization
Time(n*sqrt(n)
Space(n)
# 06/15/2023

Sum possible

The problem will take two arguments

Amount = 5, numbers = [1, 2, 3] 

Return true whether some values of the array 
can be summed up to equal the amount. In this case
we can return true

2 + 3
3 + 1 + 1
2 + 1 + 2
1 + 1 + 1 + 1 + 1

But we have at least one way of summing to 5, so we can return true

Amount = 15, numbers = [6, 4, 10]
Is false since you cannot get 15 with any of those numbers added.

E.G. 

Amount = 4
Numbers = [1, 2, 3]

#			4
#		    1/ 2| \3 	
#		    3	2  1 

The node values are the amounts were are trying to break down.
The values next to the edges are some numbers that we arbitrarily choose from our list.

#			 4
#		     1/ 2| \3 	
#		     3	 2   1 
#		  1/2|\3
#		  2  1 0
#

The upmost subtree's 2 node value is important to look out for 
because we can only use some of our numbers for valid moves. 
In other words, we can do 2 - 1 = 0, 2 - 2 = 0, not 2 - 3 = -1 
even though we have the option to chose 3 from our list. 
That would bring us to a negative number.

#			    4
#		     1/    2|  \3 	
#		     3	    2    1 
#		  1/2|\3   1/\2	 |1
#		  2  1 0   1  0  0

Let's continue this pattern until we cannot break the nodes any further.
This problem is basically being torn apart recursively, and a tree
data structure does not need to be implemented.
The tree diagram is used to understand the options that we can take!

#			    4
#		      1/    2|  \3 	
#		      3	     2    1 
#		   1/ 2|3\  1/\2  |1
#		   2  1  0  1  0  0
#		 1/\2 1|   1|  	
#		 1| 0  0    0
#		  0

The base case
If amount == 0, then return true  
Because we can always generate 0 by not choosing numbers from the list
Or by not having no numbers available.

This path 
#	 4 
#      1/	   
#      	3
#	|2
#	1
#	|1
#	0 (true)


1 + 2 + 1 = 4 adding the numbers along the edges
How do the values return? 
Given a parent node if it receives a true from any of it's children 
then it's also true. Trues will bubble up.

Bubbling up a true from the bottom nodes at 0 to the root:

#			    4 (t)
#		      1/    2|  \3 	
#    		 (t)  3	 (t) 2    1(t)
#		   1/ 2|\3  1/\2  |1
#		   2  1  0  1  0  0
#		 1/\2 1|   1|  	
#		 1| 0  0    0
#		  0


Brute force complexity
A = amount
N = length of numbers
Time O(n^a) 
Space O(a) based on height of the tree

Recognize duplicate sub trees, for example some rooted at 2 and 1 nodes.
This implies we are trying to solve duplicate problems. 
We should memorize those answers to fetch them when needed!

Untrimmed tree
#			    4
#		      1/    2|  \3 	
#		      3	     2    1 
#		   1/ 2|\3  1/\2  |1
#		   2  1  0  1  0  0
#		 1/\2 1|   1|  	
#		 1| 0  0    0
#		  0

Trimmed tree

#			   4(t)
#		      1/  2|  \3 	
#		      3	   2   1 
#		   1/ 2|3\    
#		   2  1   0  
#		 1/\2    	
#		 1| 0  
#		  0

Memoized complexity
A = amount
N = length of numbers (width)

Time: O(a*n)
Space: O(a)

A false scenario
Amount = 15, numbers = [4, 6, 10]

Bubbling up false from the bottom nodes to the root:

#			    15(f)
#		      4/    6|  \10 	
#		      11     9    5 
#		   4/   \6  4/\6  |4
#		   7     5  5  3  1
#		 4/\6   4| 4|  	
#		 3  1    1  1(f)

Bottom most nodes cannot be broken further
because we end up with negative values.		  
That means those quantity cannot be used 
so false would be bubbled up, but remember
A parent will only return true if only one child returns true.

If a value < 0 (meaning it's negative) is the other base case.
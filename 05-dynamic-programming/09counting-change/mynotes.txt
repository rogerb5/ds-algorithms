# 06/17/23
# Counting change

Amount = 4, coins = [1, 2, 3]

We want to return the number of ways that is possible 
to make the amount given the coins in the array. Also, we can reuse a coin
walue.

1) 1 + 1 + 1 + 1

2) 3 + 1

3) 2 + 2

4) 2 + 1 + 1


Let's draw a tree

		 4
#	     1/    2|  \3
#	     3      2   1
#	 1/ 2|\3  1/\2  |1
#	 2   1 0  1  0  0
#      1/\2  |1	  |1	
#      1  0  0    0
#      |1	
#      0   	

We previously said there only 4 ways to create our target amount
But we wave 7 paths.

That is because we are counting duplicate ways! Both in
The path and amount. We should not structure the tree this way!

1 + 2 + 1
2 + 1 + 1

The edges denote quantity of coins taken
There is one node with zero, this means one way to generate amount of 4.
Four 1 cent coins.

Coin = 1

#                4     
#	x0/ x1| x2\ x3\ \x4   
#	4     3   2   1  0
#


Coin = 2

    #                4     
c=1 #	x0/ x1| x2\ x3\ \x4   
    #	4     3   2   [1]  0
c=2 #  x0/ x1| \x2
    #   4    2 0 


Notice at node 1, since we are trying to decide how many two cent
coins we can take it becomes a dead end to ignore.
Whenever we have an amount that we can no longer shrink 
there is no need for expansion

Ignoring node 1 and reorganizing the tree
Node 3 can be expanded by taking x0 coin 2 or x1 coin 2.

Coin =2

    #                       4     
c=1 #		x0/   x1|   x2\     \x4   
    #		4       3      2     0
c=2 #  	x0/ x1| \x2  x0/\x1  x0/\x1
    #   4    2   0   3   1    2 0 

So far we have three distinct ways to create our target amount of 4.


Coin = 3

c=1 #                     4     
    #		x0/   x1|      x2\     \x4   
    #		4       3         2     0
c=2 #  	x0/ x1|  \x2  x0/ \x1  x0/ \x1
    #  	4    2    0    3   1    2   0 
c=3 # x0/\x1 |x0    x0/\x1 |x0  |x0
    #  4 1   2	     3  0  1    1  

Shown with equations:

1) 1 + 1 + 1 + 1 [!]

2) 3 + 1 [!]

3) 2 + 2 [!]

4) 2 + 1 + 1 [!]

In summary, there are 4 different ways to make 4 using the coins
[1, 2, 3].

Notice how some leafs don't terminate to zero so they do not represent
valid ways of making 4. Where a node is zero the 4 different 
ways of making our original amount.

The key pattern is to choose different quantities for a single coin value
before moving to the next coin value. We do not want to flip between different
coin values which results in seeing duplicate values.

Dynamic programming w/memoization
Time O(a * c)
Space O(a * c)
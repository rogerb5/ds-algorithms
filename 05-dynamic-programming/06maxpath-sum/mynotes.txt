# 06/16/13
# max path sum

Based of a grid start at the top left corner 
With a goal of traveling to the bottom right.
Keep track of the max path sum, and keep in mind
You may only move down or rightward.

[1][3][12]
[5][6][2]

One path:
1 + 5 + 6 + 2 => 14

Another path:
1 + 3 + 6 + 2 = 12

Final path:
1 + 3 + 12 + 2 = 18

We would choose 18 as the max path sum
Let's visualize it:

#     0  1  2
#   0[1][3][12]
#   1[5][6][2]


As a tree as well

#		0,0
#	       /   \
#	     1,0   0,1	
#	      |	    /\	
#	     1,1  1,1 0,2
#	      |	   |   |		
#	     1,2  1,2 1,2	

Base Case:
The program terminates at position (1,2) since 
that is the bottom right corner in our grid. 

Base Case:
How can we start accumulating a sum?
If we are at the end position, we will just return
The number that is in that final position. 

The bottom row nodes will return a 2. (1,2) on grid.

#		0,0
#	       /   \
#	  (13)1,0   0,1	
#	      |	    /\	
#	  (8)1,1  1,1 0,2
#	      |	   |   |		
#(2)	     1,2  1,2 1,2


2 will get bubbled up to (1,1) which
represents the current value of 6 on the grid
2 + 6 = 8

8 will get bubbled to (1,0) which represents the current
Value of 5 on the grid so
8 + 5 = 13

We continue to the other sub tree.

#		0,0(18)
#	       /   \
#	  (13)1,0   0,1(17)	
#	      |	    /\	
#	  (8)1,1 (8)1,1 0,2(14)
#	      |	   |   |		
#(2)	     1,2  1,2 1,2

At (0,1) we need to choose the greater between 8 and 14.
14 will get bubbled upwards since we want a max path sum. 
Do not forget to add the current position value from the grid as well.
14 + 3 = 17

Now compare 13 and 17 and add the grid position value
17 + 1 = 18.

In summary, we choose the target of two children and
Add the parent. We are applying max sum logic
while summing up the paths.

R: columns
C: cols
Time O(2^(r+c))

Let's improve it with dynamic programming!

Prune the tree from overlapping problems.

#		0,0
#	       /   \
#	     1,0   0,1	
#	      |	    /\	
#	    1,1  1,1 0,2
#	      	      |		
#	             1,2

Time O(r*c) 
Space O(r*c)
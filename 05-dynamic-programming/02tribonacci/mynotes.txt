# 06/15/2023

Solve recursively 

	   n : 0 1 2 3 4 5 6 7  8 
tribonacci(n): 0 0 1 1 2 4 7 13 24 ...

There will be three base cases.

trib(0) => 0
trib(1) => 1
trib(2) => 1

Generally represented by 

trib(n) = trib(n-1) + trib(n-2) + trib(n-3)

fib(8) => 24
4 + 7 + 13 = 24

This problem needs to be broken into three sub problems
And carry on that pattern for as many nodes as we can until
We hit a base case.

#			  5
#		      /   | \
#		     4    3  2
#		   /|\   /|\
#		  3 2 1 2 1 0
#		 /|\
#		2 1 0

We obtain the following tree by using the prior 3 mentioned base cases
trib(0) => 0
trib(1) => 1
trib(2) => 1

#			  5 (4)
#		      /   |    \
#		(2)  4    3(1)  2 (1)
#		   /|\   /|\
#		  3 2 1 2 1 0
#		 /|\
#		2 1 0


2 + 1 + 1 => 4, trib(5) => 4

Recursively the complexity time O(3^n)
			   Space O(n)


We will prune the tree according to already existing trees. 
We will utilize dynamic programming which is a type of problem solving where we use overlapping sub problems. Memoization is one way we can implement dynamic programming. 
The run time would be O(n). 
For JavaScript we would us an object as a memo.
For Python we will use a dictionary. 
For Java a HashMap.

#			5
#		      / | \
#		     4  3  2
#		   /|\   
#		  3 2 1 
#		 /|\
#		2 1 0
# 06/15/2023

Min change
We want to return the minimum coins available to create a
an amount.

amount = 5, coins = [1, 2, 3]

1 + 1 + 1 + 1
1 + 2 + 2
1 + 1 + 3
2 + 3

2 + 3 = 5, and the program should return 2.
2 represents the minimum coins possible.

E.G.

Amount = 4
Coins = [1, 2, 3]

The decision tree will help us see every coin change
We can make until we reach zero.

#		     4
#	       1/     |2 \3		
#	       3      2   1	
#	    1/2|\3  1/\2  |1	
#	    2  1 0  1  0  0		
#	  1/\2 |1   |1
#	  1  0 0    0
#	 1|
#	  0 


Let's look at a path

#  4
#  \3
#  1
#  |1
#  0

3 + 1 = 4, with a length of two. Two is the
Minimal path.

Base case:
If amount == 0
 Then return 0

Bubbling up a sub tree:

#	
#	
#	2		2(0+1)
#      / \	       / \
#     1   0(0)    (0+1)1  0(0)
#     |		       |	
#     0(0)	       0

We receive a 0 from the child call and we need to add 1,
By adding one we count the edge from the root the child. 
Counting the number coins is we are counting the number of edges to a path

So now we compare the smallest of (1) and (0) which is (0) but increase
zero by one to count the edge between the nodes. The one represents
The shortest way of making two cents which represents the path as well!

#	2(1)
#	 \
#	  0


Let's continue with bubbling:
In this case 0 bubbles up to 1. 1 is added
to zero to represent the distance taken.
	
#	
#	3		 3(0+1)
#       | \	         | \
#     	1   0(0)    (0+1)1 0(0)
#     	|	         |		
#     	0(0)	         0


Combining bubbled results from previous sub trees

#		 3(0+1)
#	       / |  \	
#	   (1)2	 1(1) 0(0)
#	     /\	 |
#	    1  0 0 
#	    |	
#	    0

Which one is the smallest? 0 so zero is bubbled and added by 1
So the minimum coins to make 3 cents is 1. Which makes sense we
Have single 3 coin in our original list.

Eventually we would end up with

#
#		       4(1+1)	
#			  |   \  	
#		  /    	2(1) 1(1)
#	        3(1)    /\   |	
#	       / | \   	1 0   0	
#	      2	 1  0  	|	
#	     /\	 |     	0	  
#	    1  0 0 
#	    |	
#	    0

Choose the smallest of the three 1's technically.
And then add one to show you travelled from a child node.
The two, represents paths that use two coins (or two edges).

In the figure below the numbers next to the edges
Represent our initial break down of the problem
That will aid us in understanding how to get the initial
Sum. What we really care is about the (1) that gets bubbled from
3 ways. Up to the root and then increased by 1. This will show
Us that 2 is the minimal coins needed to make 4.

Path 1 (1+3):
#		4(2)
#		/1
#	       3
#		\3	
#		 0

Path2 (2+2):
#		4(2)
#		|2
#		2
#		 \2
#		  0

Path3 (3+1):
#	        4(2)
#		 \3
#		  1
#		  |1
#		  0


As we evaluated this tree when we received multiple sub solutions
We always choose the smallest distance travelled.
So we need to min value logic. We are figuring out the
Minimum amount of coins possible that sums up to the initial amount.
Not what two coins add to the amount! For example, that could be

3 + 1
1 + 3
2 + 2

In which the program would return two.

Time: O(c^a)
Space: O(a)

Let's memoize and trim the tree by eliminating duplicates!

		       	
#		     4(2)  	
#		  /  | \   
#	         3   2  1    	
#	       / | \     	
#	      2	 1  0  	
#	     /\	      	  
#	    1  0  
#	    |	
#	    0


Time: O(a*c)
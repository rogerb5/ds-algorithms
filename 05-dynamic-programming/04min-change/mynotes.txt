# 9/15/2023

Min change
We want to return the minimum coins available to create a
An amount.

amount = 5, coins = [1, 2, 3]

1 + 1 + 1 + 1
1 + 2 + 2
1 + 1 + 3
2 + 3

2 + 3 this would only use two coins and the program should return 4.

E.G.

Amount = 4
Coins = [1, 2, 3]

The decision tree will help us see every coin change
We can make until we reach zero.

#		     4
#	       1/     |2 \3		
#	       3      2   1	
#	    1/2|\3  1/\2  |1	
#	    2  1 0  1  0  0		
#	  1/\2 |1   |1
#	  1  0 0    0
#	 1|
#	  0 


Let's look at a path

#  4
#  \3
#  1
#  |1
#  0

3 + 1 = 4, with a length of two. Two is the
Minimal path.

Base case:
If amount == 0
 Then return 0

Bubbling up a sub tree:

#	
#	
#	2		2(0+1)
#      / \	       / \
#     1   0(0)    (0+1)1  0(0)
#     |		       |	
#     0(0)	       0

So we receive a 0 from the child call, and add one in this case
By adding one we count the edge from the root the child. 
Counting the number coins is we are counting the number of edges to a path

So now we compare the smallest of (1) and (0) which is (0) but increment
It by one to count the edge between the nodes. The one represents
The shortest way of making two cents which represents the path as well!

#	2(1)
#	 \
#	  0


Let's continue with bubbling:
In this case 0 bubbles up to 1. 1 is added
To zero to represent the distance taken.
	
#	
#	3		 3(0+1)
#       | \	         | \
#     	1   0(0)    (0+1)1 0(0)
#     	|	         |		
#     	0(0)	         0


Combining bubbled results from previous sub trees

#		 3(0+1)
#	       / |  \	
#	   (1)2	 1(1) 0(0)
#	     /\	 |
#	    1  0 0 
#	    |	
#	    0

Which one is the smallest? 0 so zero is bubbled and added by 1
So the minimum coins to make 3 cents is 1. Which makes sense we
Have single 3 coin in our original list.

Eventually we would end up with

#
#		       4(1+1)	
#		   /   |   \  	
#		  /    2(1) 1(1)
#	      (1)3     /\   |	
#	       / | \   1 0  0	
#	      2	 1  0  |	
#	     /\	 |     0	  
#	    1  0 0 
#	    |	
#	    0

Choose the smallest of the 3 1's technically it's one
And then increment it by one to show you travelled from a child node.
The two, represents paths that can only take two coins.

#		4
#		/
#	       3
#		\	
#		 0

#		4
#		|
#		2
#		 \
#		  0

#	        4
#		 \
#		  1
#		  |
#		  0


As we evaluated this tree when we received multiple sub solutions
We always choose the smallest among them. So we need to min value logic.

Time: O(c^a)
Space: O(a)


Let's memoize and trim the tree by eliminating duplicates!

		       	
#		     4(2)  	
#		  /  | \   
#	         3   2  1    	
#	       / | \     	
#	      2	 1  0  	
#	     /\	      	  
#	    1  0  
#	    |	
#	    0


Time: O(a*c)
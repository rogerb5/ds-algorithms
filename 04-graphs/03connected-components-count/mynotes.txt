# 06/24/2023
# connected components count

We want to take an adjacency list of a
Undirected graph.


Graph: {
 3: [],
 4: [6],
 6: [4, 5, 7, 8],
 8: [6],
 7: [6],
 5: [6],
 1: [2],
 2: [1]
}

Visual graph representation:

1 - 2

       4
       |
   5 - 6 - 8
       |
   3   7


It has multiple connected components. 3 connected components.

Consider a counting algorithm, dfs/iterative graph traversals
Start a traversal at a certain node. Mark nodes as visited.

Key: x is for visited

Count: 0

Node:
1 <-
2
3
4
5
6
7
8

x   x
1 - 2

So count goes up, count = 1
Now with iterative code with go to node 2


Node:
1 
2 <-
3
4
5
6
7
8

x   x
1 - 2

At node 2, we have marked it as visited so 
There is no need to start a traversal. So keep the count the same.

Node:
1 
2 
3 <-
4
5
6
7
8

x   x
1 - 2

x
3

At node 3, the traversal is complete since 
There are no near nodes. Increment count by one, so count = 2.

We arrive at node 4, and it is unvisited so we begin a traversal.
So keep expanding before we go back to the iterative code.

Node:
1 
2 
3 
4 <-
5 <-
6 <-
7 <-
8 <-

x   x
1 - 2

      x4
       |
   x5 -x6 - x8
       |
  x3   x7


Count goes up to 3, count = 3
And since all nodes have been marked as visited 
We do not need to preform the iterative codes in this case!

In summary, some function that does traversal through component 
As far as possible. And iterative code to begin a traversal at
Every single starting point. Also, mark visited nodes and increase
The count.

Complexity:
n = # nodes
e = # edges

Time: O(e)
Space: O(n)


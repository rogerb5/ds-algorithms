# Iterative BFS approach with deque
# Notes

#      a
#    /   \
#   b     c
#  / \     \
# d   e     f

Deque: ---> back [] <-- front

Insertion:
append(item): append to the right
appendleft(item): add to the left
insert(index, value): add element at specified index
extend(list): adds a list of values to the right
extendleft(list): adds a list of values to the left

Deletion:
pop(): remove an element from the right
popleft(): remove an element from the left
remove(value): remove a value in the first occurence

For python we will need import the deque from collections package
A deque is a doubly ended queue in which we can both add and remove from the 
front and rear of the data structure respectively. Using a deque is more optimal than using a list in relation to running time.

Also, it is easier to process the logic when a value leaves the queue
Instead of when values enter a queue. Recursion will not be necessary for this problem
because of the default python call stack and we would end up forcing a stack to a queue. 

So I need to get this result for bfs, 
Bfs result: [a, b, c, d, e, f]
Dfs result: [a, b, d, e, c, f]

We first need to initialize the deque with the root node, and then
begin the main algorithm.

deque: [a]

While the deque is not empty then popleft() the left element of the deque
Append a to the values list, and look at a's children 
Append b (left child) first followed by c (right child) to the deque.

List:  [a]
deque: [b, c]

Now, b will be popped left from the deque and it will be appended to the end of the list.

List: [a, b]
deque: [c]

However, look at b's children, d and e. So first append d (left child) then e (right child) to the deque.

deque: [c, d, e]

c will now be popped left from the deque and appended to the list.
List: [a, b, c]

But we will also need to append c's only child f to the right-side of the deque
deque: [d, e, f]

The deque is still not empty, but d has no children
So pop left d from the deque.
While the deque is not empty, keep proccessing 
Finally, we travelled the binary tree using bfs and a deque!

List: [a, b, c, d, e, f]
